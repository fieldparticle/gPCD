/*******************************************************************
%***      PARTICLEONLY Configuration file.			           ***
%*******************************************************************
%*
%*
%******************************************************************/

name 				= "particleOnly";
version 			= "11";
//This client needs this server addresss
server_ip 			= "127.0.0.1"
server_port 		= 50004
// This server
client_ip 			= "127.0.0.1"
client_port 		= 50006
server_buf_size 	= 1024
save_img_dir 		= "J:/FPIBGDATAPY/Images"
save_csv_dir 		= "J:/FPIBGDATAPY"
// Where python will save the files
//py_plots_dir 		= "Latex/plots"
py_plots_dir 		= "J:/FPIBGJournalStaticV2/rpt"
// Where latex will reference them from.
//latex_plots_dir		= "plots"
latex_plots_dir		= ""
image_dir			= "J:/FPIBGDATAPY/images";
latex_tables_dir	= "";
tex_out_dir			= "../Latex/";
imagePrefix			= "dostudy";
image_server_ip 	= "127.0.0.1";
image_server_port 	= 50006;
image_buffer_size 	= 1024;
single_template	 	= "python/test/template/SingleImage.cfg"
item2 = "1"
item3 = "1"
item4 = "1"
item5 = "1"
item6 = "1"
item7 = "1"
item8 = "1"

application =
{
	//-----------------------------------------------
	// Window configuration
	//----------------------------------------------
	window =
	{
		title 	= "MPS";
		// Size of the window.
		size 	= { w = 1000; h = 1000; };
	};

	
	//-----------------------------------------------
	// GPU device selection - enter the name of the GPU
	// on which the application will run. If it cannot
	// find the GPU string it will select the first
	// GPU with the required capabilities.
	// Running the application once and reviewiing the
	// mps.log file will show the currently installed
	// gpu strings.
	//----------------------------------------------
	phys_device		= "NVIDIA RTX 3500 Ada Generation Laptop GPU";
	//phys_device		= "Intel(R) HD Graphics P530"
	
	//-----------------------------------------------
	// The end frame of the simpulation. Application
	// will exit after this frame.
	//----------------------------------------------
		
	//-----------------------------------------------
	// Will stop the application after 60 seconds.
	// Records frame rate and other benchmarking
	// parameters.
	//----------------------------------------------
	
	
	//-----------------------------------------------
	// Frame delay in milliseconds. 0 means the system
	// will render as fast as it is able.
	//----------------------------------------------
	frame_delay		= 0;
	
	//-----------------------------------------------
	// The end frame of the simpulation. Application
	// will exit after this frame. Zero means run to
	// infinity
	//----------------------------------------------
	end_frame		= 0;
	//-----------------------------------------------
	// Time step - not yet implimented - for dymnamics
	// will render as fast as it is able.
	//----------------------------------------------
	dt				= 0.1;
	//-----------------------------------------------
	// Show boundary subpass
	// 
	//----------------------------------------------
	
	//-----------------------------------------------
	// Capture data - not implimented.
	//----------------------------------------------
	
	cap_name 		= "cube";
	cap_num			= 0;
	cap_frames		= 237;
	
	// Must be 2 and above
	framesBuffered	= 1;
	
	//-----------------------------------------------
	// Shader selection
	//----------------------------------------------
	shader_out				= "../../shaders"
	frag_kernParticle 		= "../../shaders/NoThreads/ParticleNoThreads.frag";
	frag_kernParticlespv	= "frag2.spv";
	
	vert_kernParticle 		= "../../shaders/NoThreads/ParticleNoThreads.vert";
	vert_kernParticlespv	= "vert2.spv";
	
	
	comp_kernParticle 		= "../../shaders/NoThreads/ParticleNoThreads.comp";
	comp_kernParticlespv	= "comp.spv";
	


	// If this is set to true the program runs thorugh 
	// each of the selected <perfTest> benchmark files for 60 seconds. 
	// If this is set to false it will run the file set in 
	// <testfile> for default of 60 seconds.
	// To set a shorter time see <doAutoWait>.
	doAuto			= false;
	
	// Set this to zero for 60 secnd wait.
	// Set to any other number to shorten 
	// the test time for each benchmark file.
	doAutoWait		= 0; 
		
	// Run through the bench set path in "testdir"
	// Other wise run the bechfile in "testfile"
	testfile 		= "../../../../FPIBGDATA/perfdataPQB/0001CollisionDataSet82944X41472X23.tst";
	
	// PerfTest can be one of:
	// Increaing number of particle and cells with the same percentage of collions.
	//perfTest		= "testdirPQB"; 
	// Same number particles and cells but increasing collsions	
	//perfTest		= "testdirPCD";
	// Same amout of particles while reducing the cell numbers
	//perfTest		= "testdirCFB";
	// Same amout of particles while reducing the cell numbers
	perfTest		= "testdirDUP";
	
	// Should not require modofocation if the system was installed corretcly.
	testdirPQB			= "../../FPIBGDATAPY/perfdataPQB"
	testdirCFB			= "../../FPIBGDATAPY/perfdataCFB"
	testdirPCD			= "../../FPIBGDATAPY/perfdataPCD"
	testdirDUP			= "../../FPIBGDATAPY/perfdataDUP"
	
	
	//-----------------------------------------------
	// Shader complier for this configuration - do not edit.
	//----------------------------------------------
	compileShaders  = true;
	enableValidationLayers = true;
	stopondata		= true;
	noCompute		= false;
	
	// Debug level
	// 	0 means release no debug, no validations etc.
	debugLevel = 0;
	// Debugprintf
	reportCompFramesLessThan = 3;
	reportGraphFramesLessThan = 0;
		
	//-----------------------------------------------
	// Vulkan configuration data - do not edit.
	//----------------------------------------------
	framesInFlight		= 1;
	device_extensions 	= ( "VK_NV_shader_sm_builtins","VK_NV_shading_rate_image","VK_EXT_shader_subgroup_ballot","VK_KHR_swapchain",
							"VK_KHR_shader_non_semantic_info","VK_EXT_fragment_shader_interlock",
							"VK_EXT_shader_image_atomic_int64","VK_EXT_shader_atomic_float"  );
	instance_extensions = ( "VK_EXT_debug_utils","VK_EXT_debug_report");
	validation_layers 	= ( "VK_LAYER_KHRONOS_validation" );
	printExtension		= false;
	printDevLimtits	= true;
	verbose_rpt 		= false;
	
		
	
	
	
			

};
