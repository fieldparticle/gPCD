/*******************************************************************
%***      C PROPRIETARY SOURCE FILE IDENTIFICATION               ***
%*******************************************************************
% $Author: jb $
%
% $Date: 2023-05-03 15:30:42 -0400 (Wed, 03 May 2023) $
% $HeadURL: https://jbworkstation/svn/svnrootr5/svnvulcan/src/vulkan/DescriptorSSBO.cpp $
% $Id: DescriptorSSBO.cpp 28 2023-05-03 19:30:42Z jb $
%*******************************************************************
%***                         DESCRIPTION                         ***
%*******************************************************************
@doc
@module
			@author: Jackie Michael Bell<nl>
			COPYRIGHT <cp> Jackie Michael Bell<nl>
			Property of Jackie Michael Bell<rtm>. All Rights Reserved.<nl>
			This source code file contains proprietary<nl>
			and confidential information.<nl>


@head3 		Description. |
@normal


********************************************************************
%***                     SVN CHANGE RECORD                       ***
%*******************************************************************
%*$Revision: 28 $
%*
%*
%******************************************************************/

#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_scalar_block_layout :enable
#extension GL_KHR_memory_scope_semantics:enable
#extension GL_EXT_shader_atomic_float:enable
#extension GL_KHR_shader_subgroup_basic:enable



#include "../common/constants.glsl"
#include "../common/util.glsl"
#include "../common/push.glsl"
#include "../common/atomic.glsl"
#include "../common/CollimageIndex.glsl"
#include "../common/Lockimage.glsl"
#include "../common/particle.glsl"
#include "../common/GetCflg.glsl"
#include "../common/CalcMomentum.glsl"
#include "../common/ProcessParticleContact.glsl"
#include "../common/isParticleContact.glsl"


void main()  
{
	
	// Get invocation id which is particle numbner
	uint index = gl_GlobalInvocationID.x;
	if(index == 0)
	{
	
		
		//for(uint ii = 0; ii < NUMPARTS;ii++)
			//L[ii] = 0;
		collOut.numParticles = 0;
		collOut.CollisionCount=0;
		collOut.holdPidx = 0;
		collOut.vnumParticles=0;
		
		P[0].PosLoc.x  = 0.0;
		P[0].PosLoc.y  = 0.0;
		 //P[0].PosLoc.z   = 0.0; holds actual frame
		// Use to stop everybody on boundary violation
		P[0].PosLoc.w  = 0.0;
		return;
	}
	
#ifdef DEBUG
		atomicAdd(collOut.holdPidx,1);	
#endif	

	if (index >= NUMPARTS)
	{
		return;	
	}
	
#ifdef DEBUG
	float(atomicAdd(collOut.numParticles,1));	
#endif
	
		
	vec3 totVel = vec3(0.0,0.0,0.0);
	uint Findex = index;
	uint Tindex = 0;
	boundStruct colQ;	
	uint duplst[MAX_ARY+1];
	
	for(uint kk =0; kk < MAX_ARY; kk++)
		duplst[kk] = 0;
	
	uint dupcnt = 0;
	bool dupflg = false;
	vec3 OutVel = vec3(0.0,0.0,0.0);;		
	uint flg=0;
	P[Findex].ColFlg = 0;
	
	//uint ii = gl_GlobalInvocationID.y;
	for(uint ii = 0; ii < 8; ii++)
	{
		// Set location to local variable.
		uint loc = P[Findex].zlink[ii].ploc;
		
		#if 0
			if(uint(ShaderFlags.frameNum) == 2 && index == 2)
					debugPrintfEXT("loc:%d",loc);
				
		#endif
		// If the lcation is not zero..
		if (loc != 0)
		{
			// Use the linked particle location to index into the particle-cell hash table 
			// And compare this particle with all of the paricles at this location.
			for(uint jj = 0; jj< MAX_ARY;jj++)
			{
				
				Tindex = clink[loc].idx[jj];
				if(Tindex == 0)
					break;
				
				//----------------------- DUP Process start		
				
				for(uint cc =0; cc < MAX_ARY; cc++)
				{
					if(duplst[cc] == Tindex)
					{
						dupflg = true;
						#if 1						
						if(uint(ShaderFlags.frameNum) == 3)
							debugPrintfEXT("DUPTRUE:cc:%d,dupcnt:%d,[%d,%d,%d,%d,%d,%d,%d]",cc,dupcnt,
							duplst[0],
							duplst[1],
							duplst[2],
							duplst[3],
							duplst[4],
							duplst[5],
							duplst[6]						
							);
						#endif	
						break;
					}
					if(duplst[cc] == 0)
					{
						dupflg = false;
						duplst[cc] = Tindex;
						dupcnt = cc;
						#if 0						
						if(uint(ShaderFlags.frameNum) == 3)
							debugPrintfEXT("DUPFFALSE:cc:%d,dupcnt:%d,[%d,%d,%d,%d,%d,%d,%d]",cc,dupcnt,
							duplst[0],
							duplst[1],
							duplst[2],
							duplst[3],
							duplst[4],
							duplst[5],
							duplst[6]						
							);
						#endif	
						break;
					}
				}
				//----------------------- DUP Process end
				
					

					if(dupflg == false)						
					{
					
#if 0
					if(uint(ShaderFlags.frameNum) == 3 && dupflg == false)
					{
						
						atomicAdd(collOut.CollisionCount,1);
						if(dupflg == true)
							flg = 1;
						else
							flg = 0;
						debugPrintfEXT("F:%d C:%d, ploc:%d,aryloc:%d,Findex:%d,Tindex:%d, DUP:%d",
								uint(ShaderFlags.frameNum),
								int(collOut.CollisionCount),
								ii,
								jj,
								Findex,
								Tindex,flg);
					}
#endif
						
						if(isParticleContact(ii,Findex, Tindex, OutVel) > 0)
						{
							P[Findex].ColFlg = 1.0;
							atomicAdd(collOut.CollisionCount,1);
						}
						
							
						dupflg = true;
					
					}
				

				}
			}
		}
	
	
}