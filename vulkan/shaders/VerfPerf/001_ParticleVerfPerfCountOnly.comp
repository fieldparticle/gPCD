/*******************************************************************
%***      C PROPRIETARY SOURCE FILE IDENTIFICATION               ***
%*******************************************************************
% $Author: jb $
%
% $Date: 2023-05-03 15:30:42 -0400 (Wed, 03 May 2023) $
% $HeadURL: https://jbworkstation/svn/svnrootr5/svnvulcan/src/vulkan/DescriptorSSBO.cpp $
% $Id: DescriptorSSBO.cpp 28 2023-05-03 19:30:42Z jb $
%*******************************************************************
%***                         DESCRIPTION                         ***
%*******************************************************************
@doc
@module
			@author: Jackie Michael Bell<nl>
			COPYRIGHT <cp> Jackie Michael Bell<nl>
			Property of Jackie Michael Bell<rtm>. All Rights Reserved.<nl>
			This source code file contains proprietary<nl>
			and confidential information.<nl>


@head3 		Description. |
@normal


********************************************************************
%***                     SVN CHANGE RECORD                       ***
%*******************************************************************
%*$Revision: 28 $
%*
%*
%******************************************************************/

#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_scalar_block_layout :enable
#extension GL_KHR_memory_scope_semantics:enable
#extension GL_EXT_shader_atomic_float:enable
#extension GL_KHR_shader_subgroup_basic:enable


#include "../params.glsl"
#include "../common/constants.glsl"
#include "../common/util.glsl"
#include "../common/push.glsl"
#include "../common/atomic.glsl"
#include "../common/CollimageIndex.glsl"
#include "../common/Lockimage.glsl"
#include "../common/particle.glsl"
#include "../common/isParticleContact.glsl"
#include "../workgroups.glsl"

///
// Use this one with 000_ParticleVerfPerfCountOnly.vert to
// see if you are getting the right number of threads and particles in 
// vert and comp piplines.
////

void main()  
{

	// Get invocation id which is particle numbner
	uint index = gl_GlobalInvocationID.x;
	if(index == 0)
	{
		collOut.numParticles = 0;
		collOut.CollisionCount=0;
		collOut.holdPidx = 0;
		collOut.vnumParticles=0;
		return;
	}

#ifdef DEBUG
	atomicAdd(collOut.holdPidx,1);	
#endif	


	
#ifdef DEBUG
	atomicAdd(collOut.numParticles,1);	
#endif
	
	
	vec3 totVel = vec3(0.0,0.0,0.0);
	uint Findex = index;
	uint Tindex = 0;
	boundStruct colQ;	
	uint duplst[MAX_ARY+1];
	
	for(uint kk =0; kk < MAX_ARY; kk++)
		duplst[kk] = 0;
	
	uint dupcnt = 0;
	bool dupflg = false;
	vec3 OutVel = vec3(0.0,0.0,0.0);;		
	uint flg=0;
	
	
}