/*******************************************************************
%***      C PROPRIETARY SOURCE FILE IDENTIFICATION               ***
%*******************************************************************
% $Author: jb $
%
% $Date: 2023-05-03 15:30:42 -0400 (Wed, 03 May 2023) $
% $HeadURL: https://jbworkstation/svn/svnrootr5/svnvulcan/src/vulkan/DescriptorSSBO.cpp $
% $Id: DescriptorSSBO.cpp 28 2023-05-03 19:30:42Z jb $
%*******************************************************************
%***                         DESCRIPTION                         ***
%*******************************************************************
@doc
@module
			@author: Jackie Michael Bell<nl>
			COPYRIGHT <cp> Jackie Michael Bell<nl>
			Property of Jackie Michael Bell<rtm>. All Rights Reserved.<nl>
			This source code file contains proprietary<nl>
			and confidential information.<nl>


@head3 		Description. |
@normal


********************************************************************
%***                     SVN CHANGE RECORD                       ***
%*******************************************************************
%*$Revision: 28 $
%*
%*
%******************************************************************/

#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_scalar_block_layout :enable
#extension GL_KHR_memory_scope_semantics:enable
#extension GL_EXT_shader_atomic_float:enable
#extension GL_KHR_shader_subgroup_basic:enable
#extension GL_KHR_shader_subgroup_ballot:enable

#include "../params.glsl"
#include "../common/constants.glsl"
#include "../common/util.glsl"
#include "../common/push.glsl"
#include "../common/atomic.glsl"
#include "../common/CollimageIndex.glsl"
#include "../common/Lockimage.glsl"
#include "../common/particle.glsl"
#include "../common/GetCflg.glsl"
#include "../common/CalcMomentum.glsl"
#include "../common/ProcessParticleContact.glsl"
#include "../common/isParticleContact.glsl"

#include "../common/CheckCompDups.glsl"

#ifdef VERPIPE
	#include "../common/ProcessPipeBoundary.glsl"
#endif

#if  !defined(VERPIPE) && !defined(VERCDNOZ)
	#include "../common/ProcessCubeBoundary.glsl"
#endif

#ifdef VERCDNOZ
	#include "../common/GetCDRadius.glsl"
	#include "../common/CalcBoundaryVel.glsl"
	#include "../common/ProcessCDBoundary.glsl"
#endif



#ifdef VERPONLY
	#include "../common/ProcessPOnlyContact.glsl"
#endif

// Configure workgroups.
#include "../workgroups.glsl"
shared uint duplst[256]; 

void main()  
{
	uint dupcnt=0;			
	uint threadCount = 0;
	uint particleCount = 0;
	// Get invocation id which is particle numbner
	uint index = gl_GlobalInvocationID.x;
	if(index == 0)
	{
		//for(uint ii = 0; ii < NUMPARTS;ii++)
			//L[ii] = 0;
		collOut.numParticles = 0;
		collOut.CollisionCount=0;
		collOut.holdPidx = 0;
		collOut.vnumParticles=0;
		
		P[0].PosLoc.x  = 0.0;
		 P[0].PosLoc.y  = 0.0;
		 //P[0].PosLoc.z   = 0.0; holds actual frame
		// Use to stop everybody on boundary violation
		P[0].PosLoc.w  = 0.0;
		return;
	}
	uint cornerNum = gl_GlobalInvocationID.y;
#ifdef DEBUG
		threadCount = atomicAdd(collOut.holdPidx,1);	
#endif	

	if (index >= NUMPARTS)
	{
		return;	
	}
#ifdef DEBUG
if(cornerNum == 0)
{
	particleCount = atomicAdd(collOut.numParticles,1);	
}

#endif
	
	if(P[0].PosLoc.w == 1.0)
		return;
	vec3 totVel = vec3(0.0,0.0,0.0);
	uint Findex = index;
	uint Tindex = 0;
	bool dupflg = false;
	
	
	

	
	
	// Set location to local variable.
	uint SltIdx = P[Findex].zlink[cornerNum].ploc;
	vec3 OutVel = vec3(0.0,0.0,0.0);
	// If the lcation is not zero..
	if (SltIdx != 0)
	{
		// Use the linked particle location to index into the particle-cell hash table 
		// And compare this particle with all of the paricles at this location.
		for(uint jj = 0; jj < MAX_ARY; jj++)
		{
			Tindex = clink[SltIdx].idx[jj];

			// If the linked particle is zero teminate
			if(Tindex == 0)
				break;
			
				
				
			if(Tindex != Findex)
			{
				
				#if 0 && defined(DEBUG)
						if(uint(ShaderFlags.frameNum) == 8 && Findex == 1)
							debugPrintfEXT("CheckCompDups IN F:%u,Findex:%u Tindex:%u,SltIdx:%u,jloc:%u, iloc:%u",
										uint(ShaderFlags.frameNum),Findex,Tindex,SltIdx,jloc,iloc);
				#endif	
				
					
				dupflg = false;
				subgroupMemoryBarrier();	
				for(uint t = 0; t <= dupcnt; t++)
				{			
					if(duplst[t] == Tindex)
					{
						dupflg = true;
						if(uint(ShaderFlags.frameNum) == 8 && index == 1)					
							debugPrintfEXT("TRUE %u,%u",Tindex,dupcnt);
						break;
					}
				}
				if(dupflg == false)
				{			
					duplst[dupcnt] = Tindex;
					dupcnt++;
					subgroupMemoryBarrier();	
					if(uint(ShaderFlags.frameNum) == 8 && index == 1)					
							debugPrintfEXT("FALSE %u,%u",Tindex,dupcnt);
				}
				
				if(isParticleContact(cornerNum,Findex, Tindex, OutVel) > 0 && dupflg == false)
				{
						
					#if 1 && defined(DEBUG)
						atomicAdd(collOut.CollisionCount,1);
					#endif
				}
			}	
		}
	}
#if 0 && defined(DEBUG)	
	if(uint(ShaderFlags.frameNum) == 8 && index == 1)
	{
		//debugPrintfEXT("gl_NumSubgroups:%u,gl_SubgroupID:%u,gl_SubgroupInvocationID:%u,gl_SubgroupSize:%u",
		//		gl_NumSubgroups,gl_SubgroupID,gl_SubgroupInvocationID,gl_SubgroupSize);
		///debugPrintfEXT("gl_GlobalInvocationID <%u,%u,%u>,pcount:%u, tcount:%u",
		//		gl_GlobalInvocationID.x,gl_GlobalInvocationID.y,gl_GlobalInvocationID.z,
		//		particleCount,threadCount);
		debugPrintfEXT("%u,%u,%u,%u,%u,%u,%u,%u,slot:%u,i:%u",
		duplst[0],duplst[1],duplst[2],duplst[3],duplst[4],duplst[5],duplst[6],duplst[7],dupcnt,gl_SubgroupInvocationID);
	}
#endif	

	
}