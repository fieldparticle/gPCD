/*******************************************************************
%***      PARTICLEONLY Configuration file.			           ***
%*******************************************************************
%*
%*
%******************************************************************/

name = "particleOnly";
version = "11";

application =
{
	
	app = "ParticleOnly";
	
	//-----------------------------------------------
	// GPU device selection - enter the name of the GPU
	// on which the application will run. If it cannot
	// find the GPU string it will select the first
	// GPU with the required capabilities.
	// Running the application once and reviewiing the
	// mps.log file will show the currently installed
	// gpu strings.
	//----------------------------------------------
	phys_device		= "NVIDIA RTX 3500 Ada Generation Laptop GPU";
	//phys_device		= "Intel(R) HD Graphics P530"
	
	//-----------------------------------------------
	// The end frame of the simpulation. Application
	// will exit after this frame.
	//----------------------------------------------
		
	//-----------------------------------------------
	// Will stop the application after 60 seconds.
	// Records frame rate and other benchmarking
	// parameters.
	//----------------------------------------------
	
	
	//-----------------------------------------------
	// Frame delay in milliseconds. 0 means the system
	// will render as fast as it is able.
	//----------------------------------------------
	frame_delay		= 0;
	
	//-----------------------------------------------
	// The end frame of the simpulation. Application
	// will exit after this frame. Zero means run to
	// infinity
	//----------------------------------------------
	end_frame		= 30000;
	//-----------------------------------------------
	// Time step - not yet implimented - for dymnamics
	// will render as fast as it is able.
	//----------------------------------------------
	dt				= 0.1;
	//-----------------------------------------------
	// Show boundary subpass
	// 
	//----------------------------------------------
	
	//-----------------------------------------------
	// Capture data
	//----------------------------------------------
	
	// Must be 2 and above
	framesBuffered	= 1;
	
	//-----------------------------------------------
	// Shader selection
	//----------------------------------------------
	doMotion = false;	
	
	// Run through the bench set path in "testdir"
	// Other wise run the bechfile in "testfile"
	testtype 		= "VerfPerf";
	//testtype 		= "cdn";
	
	VerfPerf = {
			frag_kernParticle 		= "../../shaders/VerfPerf/ParticleVerfPerf.frag";
			frag_kernParticlespv	= "frag2.spv";
			
			/// ############################# vertex #############################################
			
			vert_kernParticle 		= "../../shaders/VerfPerf/ParticleVerfPerf.vert";
			///
			// Use this one with 000_ParticleVerfPerfCountOnly.comp to
			// see if you are getting the right number of threads and particles in 
			// vert and comp piplines.
			////
			//vert_kernParticle 		= "../../shaders/VerfPerf/000_ParticleVerfPerfCountOnly.vert";
			///
			// Use this one with 000_ParticleVerfPerfCountOnly.comp to
			// see the effect of finding the particle AABB corners.
			//
			////
			//vert_kernParticle 		= "../../shaders/VerfPerf/001_ParticleVerfPertLocateCornersOnly.vert";
			///
			// Use this one with 000_ParticleVerfPerfCountOnly.comp to
			// see the effect of finding the particle AABB corners and eliminating duplicates.
			//
			////
			//vert_kernParticle 		= "../../shaders/VerfPerf/002_ParticleVerfPertCornerDups.vert";
			vert_kernParticlespv	= "vert2.spv";
			
			/// ############################# compute #############################################
			///
			// Use this one with 000_ParticleVerfPerfCountOnly.vert to
			// see if you are getting the right number of threads and particles in 
			// vert and comp piplines.
			////
			//comp_kernParticle 		= "../../shaders/VerfPerf/000_ParticleVerfPerfCountOnly.comp";
			///
			// Use this one with ParticleVerfPerf.vert to
			// see if you are getting the right number of threads,particles and collsions
			////
			comp_kernParticle 		= "../../shaders/VerfPerf/ParticleVerfPerf.comp";
			comp_kernParticlespv	= "comp.spv";
			
			/// ############################# Single Test File #############################################
			///
		
			testfile 		= "../../../../gPCDData/perfDataDUP/001CollisionDataSet64X128X5.tst";
			
			
			
		};
	
	gen_glsl_dir			= "../../shaders"

	
	// If this is set to true the program runs thorugh 
	// each of the selected <perfTest> benchmark files for 60 seconds. 
	// If this is set to false it will run the file set in 
	// <testfile> for default of 60 seconds.
	// To set a shorter time see <doAutoWait>.
	doAuto			= true;
	// To perform performance on one file set doAuto to true and this to true.
	// Set test file to the sngle file you want to test.
	doAutoSingleFile		= false;
	stopOnError		= false;
	auto_sleep = 10;
	
	// Set this to zero for 60 secnd wait.
	// Set to any other number to shorten 
	// the test time for each benchmark file.
	seriesLength		= 10; 
	// Stop after <stopseries> numbver of tests
	stopseries			= 5;
	// PerfTest can be one of:
	
	//============================== RANDOM
	// Increaing number of particle and cells with the same percentage of collions.
	//perfTest		= "testdirPQBST"; 
	// Increaing number of particle and cells with the same percentage of collions.
	//perfTest		= "testdirPQBS"; 
	
	//============================== SEQUENTIAL
	// Increaing number of particle and cells with the same percentage of collions.
	//perfTest		= "testdirPQBR"; 
	// Increaing number of particle and cells with the same percentage of collions.
	//perfTest		= "testdirPQBRT"; 
	
	//============================== Collision Fraction benchmark
	// Same particles increasing collsons
	//perfTest		= "testdirCFB";
	//perfTest		= "testdirCFBT";
	
	//============================== PARTICLE CELL DENSITY
	// Same number particles increase particle per cell	
	//perfTest		= "testdirPCD";
	// Same number particles and cells but increasing collsions	
	//perfTest		= "testdirPCDT";
	
	// Same amout of particles while reducing the cell numbers
	perfTest		= "testdirDUP";
	
	// Should not require modofocation if the system was installed corretcly.
	testdirPQBST		= "..\..\..\..\gPCDData\perfDataPQB";
	testdirPQBS			= "..\..\..\..\gPCDData\perfDataPQB";
	
	testdirPQBRT		= "..\..\..\..\gPCDData\perfDataPQBR";
	testdirPQBR			= "..\..\..\..\gPCDData\perfDataPQBR";
	
	testdirCFB			= "..\..\..\..\gPCDData\perfDataCFB";
	testdirCFBT			= "..\..\..\..\gPCDData\perfDataCFB";
	
	testdirPCD			= "..\..\..\..\gPCDData\perfDataPCD";
	testdirPCDT			= "..\..\..\..\gPCDData\perfDataPCD";
	
	testdirDUP			= "..\..\..\..\gPCDData\perfDataDUP";
	
	//-----------------------------------------------
	// Shader complier for this configuration - do not edit.
	//----------------------------------------------
	compileShaders  = true;
	// 	
	enableValidationLayers = true;
	stopondata		= true;
	noCompute		= false;
	
	// Debug level
	// 	0 means release no debug, no validations etc.
	debugLevel = 0;
	// Debugprintf
	reportCompFramesLessThan = 5;
	reportGraphFramesLessThan = 5;
		
	//-----------------------------------------------
	// Vulkan configuration data - do not edit.
	//----------------------------------------------
	framesInFlight		= 1;
	device_extensions 	= ( "VK_NV_shader_sm_builtins","VK_NV_shading_rate_image","VK_EXT_shader_subgroup_ballot","VK_KHR_swapchain",
							"VK_KHR_shader_non_semantic_info","VK_EXT_fragment_shader_interlock",
							"VK_EXT_shader_image_atomic_int64","VK_EXT_shader_atomic_float"  );
	instance_extensions = ( "VK_EXT_debug_utils","VK_EXT_debug_report");
	validation_layers 	= ( "VK_LAYER_KHRONOS_validation" );
	printExtension		= false;
	printDevLimtits	= true;
	verbose_rpt 		= false;
	nsight				= false;
	
		
	
	
	
			

};
